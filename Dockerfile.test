FROM gcc:latest

WORKDIR /app

COPY . .

# 清除可能存在的构建文件
RUN rm -rf test_build

# 安装依赖
RUN apt-get update && \
    apt-get install -y libasio-dev libpqxx-dev gcc make cmake curl libssl-dev uuid-dev python3 python3-pip && \
    # 安装 Crow
    curl -O -L https://github.com/CrowCpp/Crow/releases/download/v1.2.1.2/Crow-1.2.1-Linux.deb && \
    apt install "./Crow-1.2.1-Linux.deb" -y && \
    rm ./Crow-1.2.1-Linux.deb

# 创建测试配置
RUN echo '{ "database": "postgresql://neondb_owner:npg_9nH8RLBWUdro@ep-silent-leaf-a77kylcx-pooler.ap-southeast-2.aws.neon.tech/dev?sslmode=require", "JWTSecret": "test_jwt_secret" }' > config.json

# 构建测试
RUN mkdir -p test_build && \
    cd test_build && \
    cmake .. -DBUILD_TESTING=ON -DCMAKE_POLICY_VERSION_MINIMUM=3.5 && \
    make && \
    ls -la tests/ && \
    echo "可用测试:" && \
    find . -name "*tests" -type f -executable

# 安装测试报告工具
RUN pip3 install gtest-html-report

# 设置测试运行脚本
COPY <<EOF /app/run_tests.sh
#!/bin/bash
cd /app/test_build

# 创建报告目录
mkdir -p /app/test_reports

echo "运行简单测试..."
if [ -f ./tests/simple_test ]; then
    ./tests/simple_test --gtest_output=xml:/app/test_reports/simple_test.xml
else
    echo "简单测试可执行文件不存在"
fi

echo "运行单元测试..."
if [ -f ./tests/unit_tests ]; then
    ./tests/unit_tests --gtest_output=xml:/app/test_reports/unit_tests.xml
else
    echo "单元测试可执行文件不存在"
fi

echo "运行集成测试..."
if [ -f ./tests/integration/integration_tests ]; then
    ./tests/integration/integration_tests --gtest_output=xml:/app/test_reports/integration_tests.xml
else
    echo "集成测试可执行文件不存在"
fi

# 生成HTML报告
echo "生成HTML测试报告..."
gtest-html-report --source-dir=/app --target-dir=/app/test_reports --report-dir=/app/test_reports/html
EOF

RUN chmod +x /app/run_tests.sh

CMD ["/app/run_tests.sh"]